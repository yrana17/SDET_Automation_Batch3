Selenium is suite of tools.

IDE : firefox addon -- record and playback thing
RC : it does injecting js functions. it is not directly interacting with browser.

Webdriver : it interact directly with browser. 
Grid: to distribute test on diff machines. hub and node. Parallel execution.

Automation -- UI ---> Browser 

Clieint libraries  --> by injecting js functions 



Requirement:
1.Selenium Java dependency
3.141.59
2.Based on browser version, we need browser driver.exe file
Chrome Browser Version:88.0.4324.190
Chrome Driver exe file: https://chromedriver.chromium.org/downloads  ChromeDriver 88.0.4324.96



Locators

id
classname
partiallinktest
linktext
name
xpath
css selector


10 second  -- after every 500msec it is checking

https://github.com/mozilla/geckodriver/releases
https://www.selenium.dev/downloads/


Build is to compile steps
Perform is to execute steps


Reporting--
Health certificate for your application or product.

Requirement 
high level scenarios
test cases
test steps
status of each execution


Short concise
trackable to find root cause
should contains test cases count along with pass and failure count
execution time
format should be such that it is easily sharable over email or chat
should be compatible to be integrated with other tools
test coverage - rtm


Types of reports-
1.html report
2.log - technical flow
3.excel reports
4.Screenshots
5.Cucumber reports
6.testng reports
7.junit reports 


Databases:
Oracle
Mysql
IBM DB2
sql server
ms access









Functional Testing - > Execution  


Pre Requisite
Test Suites
Test Cases -> Test Data
Check for Reports
Defect

TESTNG
Testing framework 
Based on Annotations
Help our code or functions written to get group in diff suites and tests
Java features
put interdependency of tests
Can integrate with maven and jenkins

<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.9.9</version>
		</dependency>



TestNG - http://dl.bintray.com/testng-team/testng-eclipse-release/





@BeforeSuite  -- before start of every test suite
@AfterSuite -- after complete execution of test suites
@Test -- this denote our test case
@BeforeMethod  -- before every test
@BeforeTest -- before all the test




Before Suite > Before Test > Before Class > Before Method > Test1 > After Method > 
Before Method > Test2 > After Method > After Class > After Test > After Suite


Priority : to handle order of test execution. By default is ascending order.
Description : to give meanning to test methods
Timeout : to test whether our test is executing within designated time.
DataProvider : to provide data to run same test ,multiple time
DataProviderClass : to read dataprovider from another class. has to be static to get called from another class.


Assertions are checkpoint or validation.
Soft Assertion - verify 
if assertion fails in test then it will execute further steps in test.

Hard Assertion - assert   
if assertion fails in test then it will not going to execute further steps in test.


Enabled if equals to false will ignore the test and not execute that.

Groups- categorising tests in multiple categories
DependsOnGroups - execution of current test will depend on pass result of group name specified else its execution will be skipped.

dependsOnMethods -execution of current test will depend on pass result of test method specified else its execution will be skipped.
alwaysrun - test get executed irrespective of its dependency on another test result.

InvocationCount - no of times method is called.
InvocationTimeOut- max no of msec for all invocations together
Timeout- max no of msec for each invocation of test.


ExpectedException - when we expect certain exception to be thrown by test methhod - pass else fail.
ExpectedExceptionsMessageRegularExpression - message in thrown exception should match the message expected.







Page Object Model - POM MOdel

Create a Repo for web elements 

UI -> Pages  -> Define Locators & Methods all together

It means each class will contains details about 1 UI.

Code duplication
script maintainance

As test suite grows our maintainance will become tough.


POM -
LoginPage
HomePage -->  Directory Tab  + Logout
DirectoryPage -> Search By Name + read the details
		 Reset
		 Search by Title + read the details
		 Reset
		 Search by Location + read the details



	@FindBy(linkText = "Forgot your password?")
	WebElement forgotPswd;

	@FindBy(tagName = "a")
	List<WebElement> lnk;

//FindBys will fulfill both criterias
	@FindBys({ @FindBy(how = How.ID, using = "txtUsername"), @FindBy(how = How.NAME, using = "txtPassword") })
	List<WebElement> bothCriterias;

//FindAll will select elements fulfilling either of the criterias
	@FindAll({ @FindBy(id = "txtUsername"), @FindBy(name = "txtPassword") })
	List<WebElement> eitherCriterias;







Insprint Automation

2 week sprint  :  Tuesday - Next to next week Monday

4 days - dev completed 1 story    (fsd + tdd + scenarios & test case creation + test data creation)

day 1 --  tuesday only -- start writing my code (be ready with my architecture of code) - automation planning

local dev env access  --> devloper develop i can get replica of same

Selenium java code  ->  push to github   -> integrated same to jenkins  --> jenkins job is created for our testing
-> provide parameter values like which test to run in jenkin job

CI CD   --> CT

Jenkins CICD Pipileine  --> post build step : automation job is ready from our side and kick of once deploymenmt is done.

once CICDCT is done so everyone get notification via email with attached report on the success or failure execution.



Dev -> code commit > git hub > jenkins  > build > test > stage > deploy








TDD VS BDD VS ATDD



Requirement  -- Business


Agile  -- 2 weeks sprint 


Product owner
Scrum Master
Dev
QE/Automation QE




1.TDD - Test Driven Development

I will write some test
execute test -- fail or Pass

if fail --> refactor code

Again Execute it chk for fail or pass 

if fail --> refactor

else

move to new one

Fixed set of input and expected output knwon in advance.
Unit Testing.


2.BDD - Behavioral Driven Development

Business Experts writing tests 
done before development begins

Grooming Session --> writing or fixing requirements


3.ATDD --  Acceptance Test Driven Development

Requirements  

50 user stories 
business expert will define those stories
they explain them in simple ENGLISH language

Given   --> what we already have or where we are actually
When    --> steps to be executed or Actions 
Then    -->  Expected Result



Demo to Business Person => Product Owner who accpt or reject the story based on the demo provided.




Cucumbers Plugin - https://cucumber.github.io/cucumber-eclipse/update-site


Cucumber is a tool based on BDD Framework.

Feature File  - file with .feature extension
Feature Name
Scenarios
Given
And
When
Then

We can provide test data in feature file itself  -> Scenario ouline and Examples

Hooks
They are basically before and after condition
@before  -- it will execute before each scenario
@after   -- it will execute after each scenario

Tagged Hooks

Ordering of hooks
Before works on ascending order
After works on descending order


Background
LIst of steps we want to execute before each scenario
It is related to feature level.


CucumberOptions  --> Property or configuration file for testing your cucumber files.
features - path of feature file
Dry run checks for step definition for each step
glue= path of step def
tags = scenario tags we want to execute
format = report format




JSON is Javascript object notation.
.json extension


{

[


REST API----

Get is Read
Post is create
Put is create or replace. if found update else create new one.
Patch is update
Delete is delete




Mock API

1.download node.js for windows
2.open cmd
3.npm install json-server
4.json-server --watch test.json




GET :  http://localhost:3000/users?courseid=1
?courseid=1  denotes my query parameters



PUT can update overall data or replace.
PATCH is for update only.